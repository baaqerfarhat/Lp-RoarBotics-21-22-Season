package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
@Autonomous
public class Red1 extends LinearOpMode
{
  DcMotorEx Elev;
  DcMotorEx motor0;
  DcMotorEx motor1;
  DcMotorEx motor2;
  DcMotorEx motor3;
  DcMotorEx LinAct;
  @Override
  public void runOpMode() {
    
    motor3 = hardwareMap.get(DcMotorEx.class, "motor3");
    motor2 = hardwareMap.get(DcMotorEx.class, "motor2");
    motor1 = hardwareMap.get(DcMotorEx.class, "motor1");
    motor0 = hardwareMap.get(DcMotorEx.class, "motor0");
    LinAct = hardwareMap.get(DcMotorEx.class, "LinAct");
    DcMotor act0 = hardwareMap.dcMotor.get("act0");
    Elev = hardwareMap.get(DcMotorEx.class, "Elev");
    Servo  GripRight = hardwareMap.servo.get("GripRight");
    Servo  GripLeft = hardwareMap.servo.get("GripLeft");
      
    //Initialization
    
    GripRight.setPosition(1);
    GripLeft.setPosition(0.045);
    
    motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    Elev.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    LinAct.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    
    
      motor0.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
      motor1.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
      motor2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
      motor3.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


    waitForStart();
    if (opModeIsActive()) {
      
      //Elev improve to Grip 
      
      Elev.setTargetPosition(550);
      Elev.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      Elev.setVelocity(3000);
      sleep(500);
      
      Elev.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      
      //Move Forward q bit
      
      motor3.setTargetPosition(-250);
      motor2.setTargetPosition(-250);
      motor0.setTargetPosition(250);
      motor1.setTargetPosition(250);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(-1000);
      motor2.setVelocity(-1000);
      motor0.setVelocity(1000);
      motor1.setVelocity(1000);
      sleep(800);
      
      motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      
      //Grips On The Block
      
    GripRight.setPosition(0.95);
    GripLeft.setPosition(0.095);
    sleep(1000);
    
      //Elevator lifts up
      
      Elev.setTargetPosition(1950);
      Elev.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      Elev.setVelocity(3000);
      sleep(2000); 
      
      Elev.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

      
      //Linear Actuator is out 
      
      LinAct.setTargetPosition(1800);
      LinAct.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      LinAct.setVelocity(3000);
      sleep(750);
      
      LinAct.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

      
      
      //Strafe to Right (to Hub)
      
      motor3.setTargetPosition(2100);
      motor2.setTargetPosition(-2100);
      motor0.setTargetPosition(2100);
      motor1.setTargetPosition(-2100);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(3000);
      motor2.setVelocity(-3000);
      motor0.setVelocity(3000);
      motor1.setVelocity(-3000);
      sleep(1000);
      
      motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      
      //Moves Forward To place block
      
      motor3.setTargetPosition(-1100);
      motor2.setTargetPosition(-1100);
      motor0.setTargetPosition(1100);
      motor1.setTargetPosition(1100);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(-3000);
      motor2.setVelocity(-3000);
      motor0.setVelocity(3000);
      motor1.setVelocity(3000);
      sleep(750);
      
      //Releases block into hub
      
    GripRight.setPosition(1);
    GripLeft.setPosition(0.045);
    sleep(1000);
      
    motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    
    //Moves backwards a bit
    
      motor3.setTargetPosition(600);
      motor2.setTargetPosition(600);
      motor0.setTargetPosition(-600);
      motor1.setTargetPosition(-600);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(3000);
      motor2.setVelocity(3000);
      motor0.setVelocity(-3000);
      motor1.setVelocity(-3000);
      sleep(500);
      
    motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    
    //Rotates Clockwise to Move into parking space
    
      motor3.setTargetPosition(1430);
      motor2.setTargetPosition(1430);
      motor0.setTargetPosition(1430);
      motor1.setTargetPosition(1430);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(3000);
      motor2.setVelocity(3000);
      motor0.setVelocity(3000);
      motor1.setVelocity(3000);
      sleep(1000);
      
    motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    
    //Moves Forward To park
    
      motor3.setTargetPosition(-4600);
      motor2.setTargetPosition(-4600);
      motor0.setTargetPosition(4600);
      motor1.setTargetPosition(4600);
      
      motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
      motor3.setVelocity(-3000);
      motor2.setVelocity(-3000);
      motor0.setVelocity(3000);
      motor1.setVelocity(3000);
      sleep(2000);
      
      //Move Lin Act in 
      
      LinAct.setTargetPosition(-1450);
      LinAct.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      LinAct.setVelocity(-3000);
      sleep(750);
      
      //get elavator to position 0 
      
      Elev.setTargetPosition(-2375);
      Elev.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      Elev.setVelocity(-3000);
      sleep(1000);
      //Linear actuator back to 0
      LinAct.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      LinAct.setTargetPosition(-470);
      LinAct.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      LinAct.setVelocity(-3000);
      sleep(300);
      /*Elev.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
      Elev.setTargetPosition(-100);
      Elev.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      Elev.setVelocity(-1000);*/
      

while (opModeIsActive()) {
            telemetry.addData("velocity", motor0.getVelocity());
            telemetry.addData("position", motor0.getCurrentPosition());
            telemetry.addData("is at target", !motor0.isBusy());
            telemetry.addData("velocity", motor1.getVelocity());
            telemetry.addData("position", motor1.getCurrentPosition());
            telemetry.addData("is at target", !motor1.isBusy());
            telemetry.addData("velocity", motor2.getVelocity());
            telemetry.addData("position", motor2.getCurrentPosition());
            telemetry.addData("is at target", !motor2.isBusy());
            telemetry.addData("velocity", motor3.getVelocity());
            telemetry.addData("position", motor3.getCurrentPosition());
            telemetry.addData("is at target", !motor3.isBusy());
            telemetry.addData("velocity", Elev.getVelocity());
            telemetry.addData("position", Elev.getCurrentPosition());
            telemetry.addData("is at target", !Elev.isBusy());
            telemetry.update();
      }
    }
  }
  }